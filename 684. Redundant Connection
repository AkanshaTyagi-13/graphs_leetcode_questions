class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        class DSU{
            int[] parent;
            DSU(int size){
                parent=new int[size];
                for(int i=0;i<size;i++){
                    parent[i]=i;
                }
            }
            public int find(int x){
                if(parent[x]!=x){
                    parent[x]=find(parent[x]);
                }
                return parent[x];
            }
            public boolean union(int x,int y){
                int rootX=find(x);
                int rootY=find(y);
                if(rootX==rootY){
                    return true;
                }
                parent[rootY]=rootX;
                return false;
            }

        }
        DSU dsu=new DSU(edges.length+1);
        for(int[] e:edges){
            int x=e[0],y=e[1];
            if(dsu.union(x,y)){
                return e;
            }
        }
        return new int[0];
    }
}
