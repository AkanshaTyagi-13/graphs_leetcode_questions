class Solution {
    public int dfs(List<List<Integer>> graph, boolean[] visited, int i){
        visited[i]=true;
        int size=1;
        for(int neighbour:graph.get(i)){
            if(!visited[neighbour]){
                size+=dfs(graph,visited,neighbour);
            }
        }
        return size;
    }
    public long countPairs(int n, int[][] edges) {
        if(edges==null||edges.length==0){
            return (long)n*(n-1)/2;
        }
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        }
        boolean[] visited=new boolean[n];
        List<Integer> componentSizes=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(!visited[i]){
                int size=dfs(graph,visited,i);
                componentSizes.add(size);
            }
        }
        long totalSize=(long)n*(n-1)/2;
        for(int size:componentSizes){
            long reachable=(long)size*(size-1)/2;
            totalSize-=reachable;
        }
        return totalSize;
    }
}
