class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        Map<Integer,List<Integer>> adj=new HashMap<>();
        for(int[] e:prerequisites){
            int frst=e[0];
            int sec=e[1];
            if(adj.containsKey(sec)){
                adj.get(sec).add(frst);
            }
            else{
                adj.put(sec,new ArrayList<>());
                adj.get(sec).add(frst);
            }
        }

        int[] innodes=new int[numCourses];
        for(int[] e:prerequisites){
            innodes[e[0]]++;
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(innodes[i]==0){
                q.offer(i);
            }
        }
        while(!q.isEmpty()){
            int node=q.poll();
            List<Integer> list=adj.get(node);
            if(list!=null){
                for(int n:list){
                innodes[n]-=1;
                if(innodes[n]==0){
                    q.offer(n);
                }
            }
            }
            
        }

        for(int n:innodes){
            if(n>0){
                return false;
            }
        }
       return true; 
    }
}
