class Solution {
    class Pair{
        int i;
        int j;
        int cnt;
        Pair(int i,int j,int cnt){
            this.i=i;
            this.j=j;
            this.cnt=cnt;
        }
    }
    public int orangesRotting(int[][] grid) {
        if(grid==null||grid.length==0){
            return 0;
        }
        Queue<Pair> q=new LinkedList<>();
        int fresh=0;
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j]==2){
                    q.offer(new Pair(i,j,0));
                }
                else if(grid[i][j]==1){
                    fresh++;
                }
            }
        }
        int[][] dir={{1,0},{-1,0},{0,1},{0,-1}};
        int min=0;
        while(!q.isEmpty()){
                Pair p=q.poll();
                int r=p.i,c=p.j,cnt=p.cnt;
                min=Math.max(min,cnt);
                
                for(int[] d:dir){
                    int newi=r+d[0];
                    int newj=c+d[1];
                    if(newi>=0&&newi<grid.length&&newj>=0&&newj<grid[0].length&&grid[newi][newj]==1){
                        grid[newi][newj]=2;
                        fresh--;
                        q.offer(new Pair(newi,newj,cnt+1));
                    }
                }
        }
        return fresh==0?min:-1;
    }
}
